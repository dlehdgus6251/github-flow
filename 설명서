생성 순서

1. master 
 - 처음 프로젝트 생성시 이름 정해짐 

2. release-1.0.0
 - master 기준으로 branch 생성
 - 이 branch 는 버전별 개발시 이렇게 지음
 - 이 branch 를 기준으로 개인 branch 를 생성(release-1.0.0_ldh, release-1.0.0_psj 이런식으로)

 ex) 올 한해 동안 분기별로 4단계에 걸쳐 프로젝트진행 하게 될 시 3,6,9,12 월에 상용 배포 진행
     3월에는 관리자만 사용 할 수 있는 페이지까지 개발
     6월에는 유저가 볼 수 있는 페이지까지 개발
     9월에는 유저가 결제 가능한 기능 개발
     12월에는 통계정보를 열람 할 수 있는 개발
     위의 내용이 개발 설계 초기에 정해진 상태에서 나누어 개발 진행할 시
     
    0.0.0 각 자리 의미
    0.-.- > 개편번호 : 새로운 프로젝트 시작시 번호 상승(프로젝트 성격은 가져가되 새로운 프로젝트 생성시 상승, 카트라이더 > 카트라이더2 와 같은 상황이라 생각하면 편함)
    -.0.- > 릴리즈번호 : 쉽게 생각하면 기존 릴리즈 브랜치를 기준으로 다음분기 개발 브랜치 생성시 사용 (3월 : 1.0.0 , 6월 : 1.1.0)
    -.-.0 > 패치번호 : 이건 상황에 따라 추가 개선사항이 발생할시 상승(유저의 요청으로 기획과 다른 내용에 대한 적용 개발이 필요한 상황이 생겼다 같은)

3. hot-fix
 - master 기준으로 branch 생성
 - 상용배포는 마쳤으나 예상치못한 버그 발견으로 급하게 처리해야할 개발 건 발생시 사용
 - 사용시 반영할 개발 건 작업 후 master > hot-fix merge 하고나서 master 에 push

4. dev
 - master 기준으로 branch 생성
 - 개발 서버에 배포하여 테스트가 필요할 시 사용


위 내용이 히스토리와 버전관리를 하기 위해선 좋은 방법 이지만 활용은 잘 못하면 없느니만 못한 경우가 있습니다
아래 내용은 일반적으로 사용하는 방법입니다


1. master 
 - 처음 프로젝트 생성시 이름 정해짐 
 - 위방법과는 다르게 버전정보를 알 수 없기 때문에 상용 배포시 어떤 내용이 추가되는지 확인 가능하게 commit comment를 남기는게 좋음

2. release
 - master 기준으로 branch 생성
 - 이 branch 를 기준으로 개인 branch 를 생성(release_ldh, release_psj 이런식으로)
 - 위 방법과 다르게 버전정보를 알 수 없기 때문에 commit 시 명확하게 변경사항을 적어주는게 좋음

4. dev
 - master 기준으로 branch 생성
 - 개발 서버에 배포하여 테스트가 필요할 시 사용
